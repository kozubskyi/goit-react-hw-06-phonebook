{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/Phonebook/Phonebook.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","deleteContact","changeFilter","ContactForm","items","onContactAdd","useState","name","setName","number","setNumber","formReset","className","onSubmit","event","preventDefault","map","contact","includes","alert","id","uuidv4","htmlFor","type","value","onChange","target","required","autoComplete","pattern","defaultProps","connect","state","contacts","dispatch","actions","Filter","filter","onFilterChange","autoFocus","ContactList","onContactDelete","toLowerCase","onClick","Phonebook","App","itemsReducer","createReducer","action","payload","item","filterReducer","_","contactsReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","store","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","configureStore","reducer","devTools","process","middleware","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3026a311.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('phonebook/addContact');\r\nexport const deleteContact = createAction('phonebook/deleteContact');\r\nexport const changeFilter = createAction('phonebook/changeFilter');\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst ContactForm = ({ items, onContactAdd }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const onFormSubmit = event => {\r\n    event.preventDefault();\r\n    const names = items.map(contact => contact.name);\r\n    if (names.includes(name)) {\r\n      alert(`${name} is already in contacts.`);\r\n    } else {\r\n      const contact = { id: uuidv4(), name, number };\r\n      onContactAdd(contact);\r\n    }\r\n    formReset();\r\n  };\r\n\r\n  const changeName = event => setName(event.target.value);\r\n\r\n  const changeNumber = event => setNumber(event.target.value);\r\n\r\n  const formReset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"Phonebook__form\" onSubmit={onFormSubmit}>\r\n      <label htmlFor=\"Phonebook-form__name\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"Phonebook-form__name\"\r\n        name=\"name\"\r\n        value={name}\r\n        onChange={changeName}\r\n        required\r\n        autoComplete=\"off\"\r\n      ></input>\r\n      <label htmlFor=\"Phonebook-form__number\">Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        id=\"Phonebook-form__number\"\r\n        name=\"number\"\r\n        value={number}\r\n        onChange={changeNumber}\r\n        required\r\n        autoComplete=\"off\"\r\n        pattern=\"^[ 0-9]+$\"\r\n      ></input>\r\n      <button className=\"btn\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onContactAdd: contact => dispatch(actions.addContact(contact)),\r\n});\r\n\r\nContactForm.defaultProps = {\r\n  items: [],\r\n};\r\n\r\nContactForm.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  onContactAdd: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ filter, onFilterChange }) => (\r\n  <>\r\n    <label className=\"find-contacts__label\" htmlFor=\"find-contacts-form__filter\">\r\n      Find contacts by name\r\n    </label>\r\n    <input\r\n      type=\"search\"\r\n      id=\"find-contacts-form__filter\"\r\n      name=\"filter\"\r\n      className=\"find-contacts__input\"\r\n      value={filter}\r\n      onChange={onFilterChange}\r\n      required\r\n      autoComplete=\"off\"\r\n      autoFocus\r\n    ></input>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilterChange: event => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nFilter.defaultProps = {\r\n  filter: '',\r\n};\r\n\r\nFilter.propTypes = {\r\n  onFilterChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactList.scss';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst ContactList = ({ items, filter, onContactDelete }) => (\r\n  <ul className=\"contacts__list\">\r\n    {items\r\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n      .map(({ id, name, number }) => {\r\n        return (\r\n          <li className=\"contacts__item\" key={id}>\r\n            <p>\r\n              {name}: {number}\r\n            </p>\r\n            <button type=\"button\" className=\"btn\" onClick={() => onContactDelete(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.items,\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onContactDelete: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nContactList.defaultProps = {\r\n  items: [],\r\n  filter: '',\r\n};\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  filter: PropTypes.string,\r\n  onContactDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import './Phonebook.scss';\r\nimport ContactForm from '../ContactForm';\r\nimport Filter from '../Filter';\r\nimport ContactList from '../ContactList';\r\n\r\nconst Phonebook = () => (\r\n  <>\r\n    <h1 className=\"main-title\">Phonebook</h1>\r\n    <ContactForm />\r\n    <h2 className=\"title__contacts\">Contacts</h2>\r\n    <Filter />\r\n    <ContactList />\r\n  </>\r\n);\r\n\r\nexport default Phonebook;\r\n","import React from 'react';\nimport Phonebook from './components/Phonebook';\n\nimport './App.scss';\n\nfunction App() {\n  return <Phonebook />;\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addContact.type]: (state, action) => [...state, action.payload],\r\n  [actions.deleteContact.type]: (state, action) => state.filter(item => item.id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter.type]: (_, action) => action.payload,\r\n});\r\n\r\nexport const contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactsReducer } from '../redux/contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// STORE\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: process.env.NODE_ENV === 'development' && middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}